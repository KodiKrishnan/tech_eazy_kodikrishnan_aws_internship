name: Deploy Java Application

on:
  push:
    branches:
      - main
    tags:
      - deploy-dev
      - deploy-prod

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      STAGE: ${{ github.ref_name == 'refs/tags/deploy-prod' && 'prod' || 'dev' }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - name: Terraform Init
        run: terraform init
        working-directory: ./assignment-3

      - name: Terraform Apply
        run: terraform apply -auto-approve -var-file="${{ env.STAGE }}.tfvars"
        working-directory: ./assignment-3

      - name: Fetch Public IP from Terraform Output
        id: get_ip
        run: |
          cd ./assignment-3
          IP=$(terraform output -raw instance_public_ip 2>/dev/null || echo "")
          if [[ -z "$IP" || "$IP" == *"error"* ]]; then
            echo "‚ùå Failed to fetch a valid public_ip from terraform output"
            exit 1
          fi
          echo "INSTANCE_IP=$IP" >> $GITHUB_ENV
          echo "instance_ip=$IP" >> $GITHUB_OUTPUT
          echo "‚úÖ Fetched EC2 Public IP: $IP"

      - name: Wait and Validate App Health
        run: |
          echo "Waiting for EC2 to boot and app to start..."
          INSTANCE_IP="${{ steps.get_ip.outputs.instance_ip }}"
          sleep 180  # Initial wait

          for i in {1..10}; do
            echo "üîÑ Attempt $i: Checking http://$INSTANCE_IP"
            STATUS=$(curl -s -o response.txt -w "%{http_code}" http://$INSTANCE_IP)

            echo "‚û°Ô∏è HTTP Status: $STATUS"
            echo "‚û°Ô∏è Response Body:"
            cat response.txt

            if [ "$STATUS" == "200" ]; then
              echo "‚úÖ App is Healthy"
              exit 0
            fi

            echo "‚è≥ App not ready yet. Retrying in 15s..."
            sleep 15
          done

          echo "‚ùå App is not healthy after multiple attempts."
          exit 1

      - name: Upload Terraform State File
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: terraform-state
          path: |
            ./assignment-3/terraform.tfstate
            ./assignment-3/terraform.tfstate.backup

      - name: Terraform Destroy
        if: always()
        run: terraform destroy -auto-approve -var-file="${{ env.STAGE }}.tfvars"
        working-directory: ./assignment-3
